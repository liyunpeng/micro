使用go-micro， go mod遇到的go-systemd找不到的问题
折腾了两个晚上的时间， 每个晚上一个多小时， go-systemd总是提示错误， 网上也没找到答案，
最后还是在群里发问， 热心朋友的提醒下才成功。
本质原因是，
1.缺少一个好的习惯， 没有用go env查看当前的环境变量配置
2.用了一个错误的代理proxy.io, 应该是proxy.cn。


GOOS环境变量错误，导致下载到的go-micro-gen不符合当前操作系统。
同样因为没有go env对环境变量的检查，导致GOOS错误也没发现，
导致没有设置正确的GOOS,
导致go get到的go-micro-gen是linux格式的，
导致procf不能生成目标文件user.pb.micro.go
在windows下工作，就算在gitbash里面， export这种方式也不是一定有效的，
软件一个担心就是那些不完全失效的设置， 隐藏了排查的方向。
在windows就要在我的电脑属性里设置环境变量， 重要的要设置全，
GOOS要设置为windows, 因为有些go get得到的包是bin文件，
这个GOOS告诉go get是要linux的bin文件， 还是windows的bin文件，
设置GOOS要设置为windows，就是因为缺少了这个动作，导致go get得到的go-micro-gen bin文件不正确，
profc因为使用了go-micro-gen ，导致不能生成目标文件。
windows下go get下载，尽量在cmd命令行，不要用gitbash，因为在gitbash下，go get会下载.exe工具
生成的user.pb.go  user.pb.micro.go可以一起提交到git hub,
这样其他电脑下载， 可以直接go run server.go， 不用procf生成。
生成的go.mod也要直接提交， 这样提交时间点对应的依赖包的版本号可以记录下来，
避免依赖包的版本变换导致问题

服务发现主要用于微服务架构， 以go-micro微服务为例说明：
为服务系统有客户端， 和服务端，
客户端从这个为服务系统里请求服务，
服务端向这个为服务系统里提供服务
微服务系统会有很多个服务端，
每个服务端提供一个服务， 每个服务有自己的服务名和ip地址
客户端在请求服务的时候， 只会指定服务的地址，
不会提供服务的ip地址， 有点向浏览器输入服务的域名，而不是服务的ip地址。

为服务系统需要管理这些服务，
每个服务都有服务名和ip地址， 构成一个键值对
需要一个专门的键值对系统来存储这些服务的键值对，
如果缺少键值对， 就意味着为服务系统里没有这个服务，
所有对这个键值对系统要求是高可用的分布式系统，
即里面的一台机器宕机了， 整个系统对外的服务不受影响。
这个键值对系统， 有etcd, consul, zookeeer,

那为什么又叫服务发现呢，
因为w

